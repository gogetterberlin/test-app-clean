"use client";
import React, { useState, useEffect, useRef, useMemo } from 'react';
import { readExcelFile, validateUrls } from '../utils/excel';

function generateHtaccess(redirects: any[]): string {
  return `# 301 Redirects for SEO Relaunch\n# Generated by SEO Redirect Generator\n\n` +
    redirects.map((r) => `Redirect 301 ${r.old_url} ${r.new_url}`).join("\n");
}
function generateNginx(redirects: any[]): string {
  return `# 301 Redirects for SEO Relaunch\n# Generated by SEO Redirect Generator\n\n` +
    redirects.map((r) => `rewrite ^${r.old_url}$ ${r.new_url} permanent;`).join("\n");
}
function generateCSV(redirects: any[]): string {
  return 'Old URL,New URL,Confidence,Method\n' +
    redirects.map((r) => `${r.old_url},${r.new_url},${Math.round((r.confidence_score || 0) * 100)}%,${r.match_type || 'ai'}`).join("\n");
}

export default function TestPipeline() {
  const [oldUrls, setOldUrls] = useState('https://example.com/old-1\nhttps://example.com/old-2');
  const [newUrls, setNewUrls] = useState('https://example.com/new-1\nhttps://example.com/new-2');
  const [log, setLog] = useState<string[]>([]);
  const [redirects, setRedirects] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [maxRows, setMaxRows] = useState<number>(2);
  const [analysis, setAnalysis] = useState<any[]>([]);
  const [analysisOld, setAnalysisOld] = useState<any[]>([]);
  const [analysisNew, setAnalysisNew] = useState<any[]>([]);
  const [showAnalysis, setShowAnalysis] = useState(false);
  const [oldUploadStatus, setOldUploadStatus] = useState<string>('');
  const [newUploadStatus, setNewUploadStatus] = useState<string>('');
  const [scrapeProgress, setScrapeProgress] = useState({ old: 0, new: 0 });
  const [scrapeTotal, setScrapeTotal] = useState({ old: 0, new: 0 });
  const [scrapeEta, setScrapeEta] = useState<number | null>(null);
  const [scraping, setScraping] = useState(false);
  const scrapeStartRef = useRef<number>(0);
  const [resultTab, setResultTab] = useState<'htaccess'|'nginx'|'csv'>('htaccess');
  const [showResults, setShowResults] = useState(false);
  const [resultError, setResultError] = useState<string | null>(null);

  const oldUrlList = oldUrls.split('\n').map(u => u.trim()).filter(Boolean);
  const newUrlList = newUrls.split('\n').map(u => u.trim()).filter(Boolean);

  const appendLog = (msg: string) => setLog(l => [...l, msg]);

  async function handleExcelUpload(e: React.ChangeEvent<HTMLInputElement>, type: 'old' | 'new') {
    const file = e.target.files?.[0];
    if (!file) return;
    try {
      if (type === 'old') setOldUploadStatus('Lade...');
      if (type === 'new') setNewUploadStatus('Lade...');
      const urls = validateUrls(await readExcelFile(file));
      if (type === 'old') {
        setOldUrls(urls.join('\n'));
        setOldUploadStatus('Erfolgreich geladen!');
      } else {
        setNewUrls(urls.join('\n'));
        setNewUploadStatus('Erfolgreich geladen!');
      }
    } catch {
      if (type === 'old') setOldUploadStatus('Fehler beim Laden!');
      if (type === 'new') setNewUploadStatus('Fehler beim Laden!');
    }
    setTimeout(() => {
      setOldUploadStatus('');
      setNewUploadStatus('');
    }, 2000);
  }

  async function saveScrapeResultToSupabase(batchId: string, type: 'old' | 'new', result: any) {
    if (!batchId || !result) return;
    const payload = {
      batch_id: batchId,
      url: result.url,
      site_type: type,
      meta_title: result.title || null,
      meta_description: result.meta_description || null,
      content_text: result.main_content || null,
      scraped_at: new Date().toISOString(),
      scraping_status: result.status?.toString() || 'error',
    };
    await fetch('/api/scrape/save', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });
  }

  async function loadScrapeResultsFromSupabase(batchId: string, type: 'old' | 'new') {
    if (!batchId) return [];
    const res = await fetch(`/api/scrape/by-batch?batch_id=${batchId}`);
    const data = await res.json();
    if (!data.success || !Array.isArray(data.data)) return [];
    return data.data.filter((r: any) => r.site_type === type);
  }

  async function runPipeline() {
    console.log('Starte runPipeline');
    setLog([]);
    setRedirects([]);
    setAnalysis([]);
    setAnalysisOld([]);
    setAnalysisNew([]);
    setShowAnalysis(false);
    setScrapeProgress({ old: 0, new: 0 });
    setScrapeTotal({ old: oldUrlList.length, new: newUrlList.length });
    setScrapeEta(null);
    setScraping(true);
    scrapeStartRef.current = Date.now();
    setLoading(true);
    try {
      appendLog('1. Batch anlegen...');
      const batchRes = await fetch('/api/batch', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          batchName: 'Test-Batch ' + new Date().toISOString(),
          oldUrls: oldUrlList,
          newUrls: newUrlList,
        })
      });
      const batchData = await batchRes.json();
      appendLog('Batch: ' + JSON.stringify(batchData));
      if (!batchData.batchId) throw new Error('Batch creation failed');
      const batchId = batchData.batchId;

      // Scraping-Queue für alt & neu
      async function scrapeQueue(urls: string[], type: 'old' | 'new', concurrency = 2) {
        let results: any[] = [];
        // Vorhandene Scrape-Results aus Supabase laden
        results = await loadScrapeResultsFromSupabase(batchId, type);
        let done = results.length;
        setScrapeProgress(p => ({ ...p, [type]: done }));
        setScrapeTotal(t => ({ ...t, [type]: urls.length }));
        const queue = urls.map((url, i) => ({ url, i }));
        let idx = done;
        let running = 0;
        let etaInterval: any = null;
        function updateEta() {
          const elapsed = (Date.now() - scrapeStartRef.current) / 1000;
          const left = urls.length - done;
          if (done > 0 && left > 0) {
            const avg = elapsed / done;
            setScrapeEta(Math.round(avg * left));
          } else {
            setScrapeEta(null);
          }
        }
        etaInterval = setInterval(updateEta, 1000);
        return new Promise<any[]>(resolve => {
          async function next() {
            if (done >= urls.length) {
              clearInterval(etaInterval);
              resolve(results);
              return;
            }
            while (running < concurrency && idx < urls.length) {
              const { url, i } = queue[idx++];
              running++;
              (async () => {
                const res = await fetch('/api/scrape', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ url })
                });
                const data = await res.json();
                results[i] = data;
                await saveScrapeResultToSupabase(batchId, type, data);
                done++;
                setScrapeProgress(p => { const next = { ...p, [type]: done }; return next; });
                if (type === 'old') { setAnalysisOld(arr => [...results]); }
                if (type === 'new') { setAnalysisNew(arr => [...results]); }
                updateEta();
                running--;
                setTimeout(next, 1200);
              })();
            }
          }
          next();
        });
      }

      appendLog('2. Scraping...');
      // Scrape alt & neu parallel (jeweils mit concurrency=2)
      const [oldResults, newResults] = await Promise.all([
        scrapeQueue(oldUrlList, 'old', 2),
        scrapeQueue(newUrlList, 'new', 2),
      ]);
      setAnalysisOld(oldResults);
      setAnalysisNew(newResults);
      setScraping(false);
      setShowAnalysis(true);
      appendLog('Scrape abgeschlossen.');

      appendLog('3. Matching...');
      const matchRes = await fetch('/api/match', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ batchId })
      });
      const matchData = await matchRes.json();
      appendLog('Match: ' + JSON.stringify(matchData));
      if (!matchData.success) throw new Error('Matching failed');

      appendLog('4. Redirects abfragen...');
      const redirectsRes = await fetch(`/api/redirects?batchId=${batchId}`);
      const redirectsData = await redirectsRes.json();
      setRedirects(redirectsData.data || []);
      appendLog('Redirects: ' + JSON.stringify(redirectsData.data || []));
    } catch (e: any) {
      appendLog('Fehler: ' + e.message);
    } finally {
      setLoading(false);
      setScraping(false);
      setScrapeEta(null);
    }
  }

  // Beim Laden: Scrape-Results aus Supabase laden
  useEffect(() => {
    const lastBatchId = log.find(l => l.includes('Batch:'))?.match(/"batchId":"([^"]+)"/i)?.[1];
    if (!lastBatchId) return;
    (async () => {
      setAnalysisOld(await loadScrapeResultsFromSupabase(lastBatchId, 'old'));
      setAnalysisNew(await loadScrapeResultsFromSupabase(lastBatchId, 'new'));
    })();
  }, [log]);

  // Stats für Ergebnis-Screen
  const stats = useMemo(() => {
    const total = redirects.length;
    const ai = redirects.filter(r => r.match_type === 'ai').length;
    const confidence = redirects.length ? Math.round(redirects.reduce((acc, r) => acc + (r.confidence_score || 0), 0) / redirects.length * 100) : 0;
    return { total, ai, confidence };
  }, [redirects]);

  // Export-Strings
  const exports = useMemo(() => ({
    htaccess: generateHtaccess(redirects),
    nginx: generateNginx(redirects),
    csv: generateCSV(redirects),
  }), [redirects]);

  return (
    <div style={{ width: '100vw', minHeight: '100vh', background: '#18181b', color: '#fafafa', padding: 0, margin: 0, boxSizing: 'border-box' }}>
      <h2 style={{ fontSize: 32, fontWeight: 800, margin: '32px 0 24px 0', textAlign: 'center', letterSpacing: '-1px', color: '#fafafa' }}>Backend-Pipeline Test</h2>
      <div style={{ display: 'flex', flexWrap: 'wrap', gap: 0, width: '100vw' }}>
        <div style={{ flex: 1, minWidth: 0, padding: 0 }}>
          <label style={{ fontWeight: 600, marginLeft: 24, color: '#a1a1aa' }}>Alte URLs (eine pro Zeile):</label>
          <input type="file" accept=".xlsx,.xls,.csv" style={{ margin: '8px 0 8px 24px', color: '#fafafa', background: 'transparent' }} onChange={e => handleExcelUpload(e, 'old')} />
          {oldUploadStatus && <span style={{ color: oldUploadStatus.includes('Fehler') ? '#f87171' : '#34d399', marginLeft: 12 }}>{oldUploadStatus}</span>}
          <textarea rows={12} style={{ width: '100%', fontFamily: 'monospace', fontSize: 18, border: 'none', borderBottom: '1.5px solid #27272a', borderRadius: 0, padding: 16, marginBottom: 8, background: '#232329', color: '#fafafa', boxSizing: 'border-box', resize: 'vertical', minHeight: 180, maxHeight: 400, overflowY: 'auto' }} value={oldUrls} onChange={e => setOldUrls(e.target.value)} />
          <div style={{ color: '#818cf8', fontWeight: 500, marginBottom: 8, marginLeft: 24 }}>{oldUrlList.length} URLs importiert</div>
          <div style={{ background: '#232329', padding: 8, maxHeight: 180, overflowY: 'auto', fontFamily: 'monospace', fontSize: 16, width: '100%', borderRadius: 8, border: '1px solid #27272a', boxSizing: 'border-box' }}>
            {oldUrlList.map((url, i) => <div key={i} style={{ whiteSpace: 'pre', overflowX: 'auto', fontSize: 16, color: '#fafafa' }}>{url}</div>)}
          </div>
        </div>
        <div style={{ flex: 1, minWidth: 0, padding: 0 }}>
          <label style={{ fontWeight: 600, marginLeft: 24, color: '#a1a1aa' }}>Neue URLs (eine pro Zeile):</label>
          <input type="file" accept=".xlsx,.xls,.csv" style={{ margin: '8px 0 8px 24px', color: '#fafafa', background: 'transparent' }} onChange={e => handleExcelUpload(e, 'new')} />
          {newUploadStatus && <span style={{ color: newUploadStatus.includes('Fehler') ? '#f87171' : '#34d399', marginLeft: 12 }}>{newUploadStatus}</span>}
          <textarea rows={12} style={{ width: '100%', fontFamily: 'monospace', fontSize: 18, border: 'none', borderBottom: '1.5px solid #27272a', borderRadius: 0, padding: 16, marginBottom: 8, background: '#232329', color: '#fafafa', boxSizing: 'border-box', resize: 'vertical', minHeight: 180, maxHeight: 400, overflowY: 'auto' }} value={newUrls} onChange={e => setNewUrls(e.target.value)} />
          <div style={{ color: '#f472b6', fontWeight: 500, marginBottom: 8, marginLeft: 24 }}>{newUrlList.length} URLs importiert</div>
          <div style={{ background: '#232329', padding: 8, maxHeight: 180, overflowY: 'auto', fontFamily: 'monospace', fontSize: 16, width: '100%', borderRadius: 8, border: '1px solid #27272a', boxSizing: 'border-box' }}>
            {newUrlList.map((url, i) => <div key={i} style={{ whiteSpace: 'pre', overflowX: 'auto', fontSize: 16, color: '#fafafa' }}>{url}</div>)}
          </div>
        </div>
      </div>
      <div style={{ margin: '32px 0 24px 0', width: '100vw', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
        <label style={{ fontWeight: 600, marginRight: 12, color: '#a1a1aa' }}>Analysiere die ersten</label>
        <input type="number" min={1} max={oldUrlList.length} value={maxRows} onChange={e => setMaxRows(Number(e.target.value))} style={{ width: 80, fontSize: 18, borderRadius: 6, padding: 6, marginRight: 8, border: '1.5px solid #27272a', background: '#232329', color: '#fafafa' }} />
        <span style={{ color: '#a1a1aa', fontSize: 18 }}>Seiten</span>
      </div>
      <div style={{ width: '100vw', display: 'flex', alignItems: 'center', justifyContent: 'center', marginBottom: 32 }}>
        <button onClick={runPipeline} disabled={loading || scraping} style={{ padding: '18px 60px', fontSize: 22, borderRadius: 8, background: 'transparent', color: '#fafafa', border: '1px solid #27272a', fontWeight: 700, letterSpacing: 1, cursor: loading || scraping ? 'not-allowed' : 'pointer', opacity: loading || scraping ? 0.5 : 1 }}>
          {loading || scraping ? 'Bitte warten...' : 'Pipeline testen'}
        </button>
      </div>
      <div style={{ fontFamily: 'monospace', fontSize: 16, background: '#232329', borderRadius: 8, padding: 18, marginBottom: 24, minHeight: 80, maxHeight: 220, overflowY: 'auto', width: '100vw', boxSizing: 'border-box', color: '#fafafa', border: '1px solid #27272a' }}>
        {log.map((l, i) => <div key={i}>{l}</div>)}
      </div>
      {(scraping || scrapeProgress.old > 0 || scrapeProgress.new > 0) && (
        <div style={{ width: '100vw', marginBottom: 24, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
          <div style={{ width: 480, maxWidth: '90vw', background: '#232329', borderRadius: 8, overflow: 'hidden', marginBottom: 16, border: '1.5px solid #27272a' }}>
            <div style={{ height: 28, background: 'linear-gradient(90deg,#818cf8,#f472b6)', width: `${Math.round(((scrapeProgress.old + scrapeProgress.new) / (scrapeTotal.old + scrapeTotal.new || 1)) * 100)}%`, transition: 'width 0.5s cubic-bezier(.4,2,.6,1)', borderRadius: 8, display: 'flex', alignItems: 'center', justifyContent: 'center', color: '#fafafa', fontWeight: 700, fontSize: 18, letterSpacing: 1 }}>
              {Math.round(((scrapeProgress.old + scrapeProgress.new) / (scrapeTotal.old + scrapeTotal.new || 1)) * 100)}%
            </div>
          </div>
          <div style={{ fontFamily: 'Inter, sans-serif', fontSize: 20, color: '#818cf8', marginBottom: 8, fontWeight: 700, letterSpacing: 0.5 }}>
            Scraping: <span style={{ color: '#fafafa' }}>{scrapeProgress.old + scrapeProgress.new}</span> / {scrapeTotal.old + scrapeTotal.new} Seiten{scrapeEta !== null ? <span style={{ color: '#a1a1aa', fontWeight: 400 }}> (ca. {scrapeEta}s)</span> : ''}
          </div>
          <div style={{ width: '100vw', display: 'flex', gap: 32, justifyContent: 'center', marginTop: 24, flexWrap: 'wrap' }}>
            <div style={{ flex: 1, minWidth: 320, maxWidth: 600 }}>
              <h3 style={{ fontSize: 22, fontWeight: 800, margin: '0 0 16px 0', textAlign: 'center', color: '#818cf8', letterSpacing: -0.5 }}>Analysierte alte URLs</h3>
              <div style={{ background: '#232329', borderRadius: 8, padding: 18, minHeight: 120, border: '1px solid #27272a', maxHeight: 340, overflowY: 'auto', fontFamily: 'monospace', fontSize: 16, width: '100%', boxSizing: 'border-box', display: 'flex', flexDirection: 'column', gap: 12 }}>
                {analysisOld.length === 0 ? <div style={{ color: '#f87171', fontWeight: 600 }}>Keine alten URLs analysiert.</div> : analysisOld.filter(Boolean).map((u, i) => (
                  <div key={u.id || i} style={{ borderBottom: '1px solid #27272a', padding: '10px 0', marginBottom: 2, background: u.error ? '#3f3f46' : 'transparent' }}>
                    <div style={{ fontWeight: 700, color: '#818cf8', fontSize: 15, marginBottom: 2 }}>{u.url}</div>
                    <div style={{ display: 'flex', gap: 16, flexWrap: 'wrap', fontSize: 15 }}>
                      <span><b>Status:</b> <span style={{ color: '#a1a1aa' }}>{u.status_code ?? u.status}</span></span>
                      <span><b>Titel:</b> <span style={{ color: '#a1a1aa' }}>{u.title}</span></span>
                      <span><b>Meta:</b> <span style={{ color: '#a1a1aa' }}>{u.meta_description}</span></span>
                      <span><b>H1:</b> <span style={{ color: '#a1a1aa' }}>{u.h1_heading}</span></span>
                    </div>
                    <div style={{ color: '#52525b', fontSize: 14, marginTop: 2, whiteSpace: 'pre-line' }}><b>Main:</b> {u.main_content?.slice(0, 200) || ''}{u.main_content && u.main_content.length > 200 ? '…' : ''}</div>
                    {u.error && <div style={{ color: '#f87171', fontWeight: 600, fontSize: 14, marginTop: 4 }}>Fehler: {u.error}</div>}
                  </div>
                ))}
              </div>
            </div>
            <div style={{ flex: 1, minWidth: 320, maxWidth: 600 }}>
              <h3 style={{ fontSize: 22, fontWeight: 800, margin: '0 0 16px 0', textAlign: 'center', color: '#f472b6', letterSpacing: -0.5 }}>Analysierte neue URLs</h3>
              <div style={{ background: '#232329', borderRadius: 8, padding: 18, minHeight: 120, border: '1px solid #27272a', maxHeight: 340, overflowY: 'auto', fontFamily: 'monospace', fontSize: 16, width: '100%', boxSizing: 'border-box', display: 'flex', flexDirection: 'column', gap: 12 }}>
                {analysisNew.length === 0 ? <div style={{ color: '#f87171', fontWeight: 600 }}>Keine neuen URLs analysiert.</div> : analysisNew.filter(Boolean).map((u, i) => (
                  <div key={u.id || i} style={{ borderBottom: '1px solid #27272a', padding: '10px 0', marginBottom: 2, background: u.error ? '#3f3f46' : 'transparent' }}>
                    <div style={{ fontWeight: 700, color: '#f472b6', fontSize: 15, marginBottom: 2 }}>{u.url}</div>
                    <div style={{ display: 'flex', gap: 16, flexWrap: 'wrap', fontSize: 15 }}>
                      <span><b>Status:</b> <span style={{ color: '#a1a1aa' }}>{u.status_code ?? u.status}</span></span>
                      <span><b>Titel:</b> <span style={{ color: '#a1a1aa' }}>{u.title}</span></span>
                      <span><b>Meta:</b> <span style={{ color: '#a1a1aa' }}>{u.meta_description}</span></span>
                      <span><b>H1:</b> <span style={{ color: '#a1a1aa' }}>{u.h1_heading}</span></span>
                    </div>
                    <div style={{ color: '#52525b', fontSize: 14, marginTop: 2, whiteSpace: 'pre-line' }}><b>Main:</b> {u.main_content?.slice(0, 200) || ''}{u.main_content && u.main_content.length > 200 ? '…' : ''}</div>
                    {u.error && <div style={{ color: '#f87171', fontWeight: 600, fontSize: 14, marginTop: 4 }}>Fehler: {u.error}</div>}
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}
      {/* Ergebnis-Screen */}
      {showAnalysis && !resultError && (
        <div style={{ width: '100vw', margin: '48px 0 0 0', display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 32 }}>
          {/* Stats */}
          <div style={{ display: 'flex', gap: 32, marginBottom: 24, flexWrap: 'wrap', justifyContent: 'center' }}>
            <div style={{ background: '#232329', borderRadius: 8, border: '1px solid #27272a', padding: '24px 36px', minWidth: 180, textAlign: 'center' }}>
              <div style={{ fontSize: 32, fontWeight: 800, color: '#818cf8', marginBottom: 4 }}>{stats.total}</div>
              <div style={{ fontSize: 16, color: '#a1a1aa', fontWeight: 600 }}>Redirects</div>
            </div>
            <div style={{ background: '#232329', borderRadius: 8, border: '1px solid #27272a', padding: '24px 36px', minWidth: 180, textAlign: 'center' }}>
              <div style={{ fontSize: 32, fontWeight: 800, color: '#f472b6', marginBottom: 4 }}>{stats.ai}</div>
              <div style={{ fontSize: 16, color: '#a1a1aa', fontWeight: 600 }}>AI-Matches</div>
            </div>
            <div style={{ background: '#232329', borderRadius: 8, border: '1px solid #27272a', padding: '24px 36px', minWidth: 180, textAlign: 'center' }}>
              <div style={{ fontSize: 32, fontWeight: 800, color: '#34d399', marginBottom: 4 }}>{stats.confidence}%</div>
              <div style={{ fontSize: 16, color: '#a1a1aa', fontWeight: 600 }}>Ø Confidence</div>
            </div>
          </div>
          {/* Export-Box */}
          <div style={{ background: '#232329', borderRadius: 8, border: '1px solid #27272a', padding: '32px 24px', width: '100%', maxWidth: 900, marginBottom: 32, display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 18 }}>
            <div style={{ display: 'flex', gap: 12, marginBottom: 12 }}>
              {(['htaccess', 'nginx', 'csv'] as const).map(tab => (
                <button key={tab} onClick={() => setResultTab(tab)} style={{
                  padding: '12px 32px', fontSize: 18, fontWeight: 700, borderRadius: 8, border: resultTab === tab ? '1.5px solid #818cf8' : '1px solid #27272a', background: resultTab === tab ? '#232329' : 'transparent', color: resultTab === tab ? '#818cf8' : '#a1a1aa', transition: 'all 0.2s', cursor: 'pointer' }}>
                  {tab === 'htaccess' ? '.htaccess' : tab === 'nginx' ? 'Nginx' : 'CSV/Excel'}
                </button>
              ))}
            </div>
            <pre style={{ background: '#18181b', borderRadius: 8, padding: 18, fontSize: 16, width: '100%', minHeight: 120, maxHeight: 260, overflowY: 'auto', color: '#fafafa', fontFamily: 'monospace', border: '1px solid #27272a', marginBottom: 8 }}>{exports[resultTab]}</pre>
            <div style={{ display: 'flex', gap: 16, width: '100%', justifyContent: 'flex-end' }}>
              <button onClick={() => { navigator.clipboard.writeText(exports[resultTab]); }} style={{ padding: '10px 32px', fontSize: 16, borderRadius: 8, background: '#232329', color: '#818cf8', fontWeight: 700, border: '1px solid #818cf8', cursor: 'pointer' }}>Copy</button>
              <a href={`data:text/plain;charset=utf-8,${encodeURIComponent(exports[resultTab])}`} download={`redirects.${resultTab === 'csv' ? 'csv' : 'txt'}`} style={{ padding: '10px 32px', fontSize: 16, borderRadius: 8, background: '#232329', color: '#f472b6', fontWeight: 700, border: '1px solid #f472b6', textDecoration: 'none' }}>Download</a>
            </div>
          </div>
          {/* Detailansicht */}
          <div style={{ width: '100%', maxWidth: 1100, display: 'flex', flexDirection: 'column', gap: 24 }}>
            {redirects.map((r, i) => {
              const oldData = analysisOld.find(u => u.url === r.old_url?.url || u.url === r.old_url);
              const newData = analysisNew.find(u => u.url === r.new_url?.url || u.url === r.new_url);
              return (
                <div key={i} style={{ display: 'flex', alignItems: 'center', gap: 0, width: '100%' }}>
                  {/* Alte URL Box */}
                  <div style={{ flex: 1, background: '#232329', borderRadius: 8, padding: 18, minWidth: 220, border: '1px solid #27272a', marginRight: 0 }}>
                    <div style={{ fontWeight: 700, color: '#818cf8', fontSize: 15, marginBottom: 2 }}>{oldData?.url || r.old_url?.url || r.old_url}</div>
                    <div style={{ fontSize: 15, color: '#a1a1aa', marginBottom: 2 }}><b>Titel:</b> {oldData?.title}</div>
                    <div style={{ fontSize: 15, color: '#a1a1aa', marginBottom: 2 }}><b>Meta:</b> {oldData?.meta_description}</div>
                    <div style={{ fontSize: 15, color: '#a1a1aa', marginBottom: 2 }}><b>H1:</b> {oldData?.h1_heading}</div>
                    <div style={{ fontSize: 14, color: '#52525b', marginBottom: 2 }}><b>Main:</b> {oldData?.main_content?.slice(0, 120) || ''}{oldData?.main_content && oldData.main_content.length > 120 ? '…' : ''}</div>
                  </div>
                  {/* Pfeil */}
                  <div style={{ width: 60, display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%' }}>
                    <div style={{ width: 40, height: 2, background: 'linear-gradient(90deg,#818cf8,#f472b6)', position: 'relative' }}>
                      <div style={{ position: 'absolute', right: -8, top: -6, width: 0, height: 0, borderTop: '8px solid transparent', borderBottom: '8px solid transparent', borderLeft: '16px solid #f472b6' }} />
                    </div>
                  </div>
                  {/* Neue URL Box */}
                  <div style={{ flex: 1, background: '#232329', borderRadius: 8, padding: 18, minWidth: 220, border: '1px solid #27272a', marginLeft: 0 }}>
                    <div style={{ fontWeight: 700, color: '#f472b6', fontSize: 15, marginBottom: 2 }}>{newData?.url || r.new_url?.url || r.new_url}</div>
                    <div style={{ fontSize: 15, color: '#a1a1aa', marginBottom: 2 }}><b>Titel:</b> {newData?.title}</div>
                    <div style={{ fontSize: 15, color: '#a1a1aa', marginBottom: 2 }}><b>Meta:</b> {newData?.meta_description}</div>
                    <div style={{ fontSize: 15, color: '#a1a1aa', marginBottom: 2 }}><b>H1:</b> {newData?.h1_heading}</div>
                    <div style={{ fontSize: 14, color: '#52525b', marginBottom: 2 }}><b>Main:</b> {newData?.main_content?.slice(0, 120) || ''}{newData?.main_content && newData.main_content.length > 120 ? '…' : ''}</div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}
      {resultError && (
        <div style={{ width: '100vw', margin: '48px 0 0 0', display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 32 }}>
          <div style={{ background: '#3f3f46', color: '#f87171', border: '1.5px solid #f87171', borderRadius: 8, padding: '32px 48px', fontSize: 20, fontWeight: 700, marginTop: 32 }}>
            {resultError}
          </div>
        </div>
      )}
    </div>
  );
} 