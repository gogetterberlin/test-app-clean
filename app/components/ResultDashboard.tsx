import React, { useState, useEffect } from 'react';
import { supabase } from '../supabase/client';

type ExportTabKey = 'htaccess' | 'nginx' | 'csv';
type MappingType = 'All' | 'Exact' | 'Fuzzy' | 'Manual' | string;

type Redirect = {
  id: string;
  old_url: { url: string };
  new_url: { url: string };
  confidence_score: number;
  match_type: string;
};

type Batch = { id: string; name: string };

function useCountUp(target: number, duration = 900) {
  const [value, setValue] = useState(0);
  useEffect(() => {
    let start = 0;
    let startTime: number | null = null;
    function animate(ts: number) {
      if (!startTime) startTime = ts;
      const progress = Math.min(1, (ts - startTime) / duration);
      setValue(Math.round(target * progress));
      if (progress < 1) requestAnimationFrame(animate);
    }
    requestAnimationFrame(animate);
    return () => setValue(target);
  }, [target, duration]);
  return value;
}

export function ResultDashboard({ batchId }: { batchId: string }) {
  const [redirects, setRedirects] = useState<Redirect[]>([]);
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState<ExportTabKey>('htaccess');
  const [copySuccess, setCopySuccess] = useState(false);
  const [search, setSearch] = useState('');
  const [typeFilter, setTypeFilter] = useState<MappingType>('All');
  const [page, setPage] = useState(1);
  const perPage = 10;
  const [showDebug, setShowDebug] = useState(false);

  // Lade Redirects f√ºr den √ºbergebenen Batch
  useEffect(() => {
    if (!batchId) return;
    setLoading(true);
    (async () => {
      const { data } = await supabase
        .from('redirects')
        .select('id, old_url:old_url_id(url), new_url:new_url_id(url), confidence_score, match_type')
        .eq('batch_id', batchId);
      // Fange Array/Objekt-Relationen ab
      const normalized = (data || []).map((r: any) => ({
        ...r,
        old_url: Array.isArray(r.old_url) ? r.old_url[0] : r.old_url,
        new_url: Array.isArray(r.new_url) ? r.new_url[0] : r.new_url,
      }));
      setRedirects(normalized);
      setLoading(false);
    })();
  }, [batchId]);

  // Stats
  const total = useCountUp(redirects.length);
  const exact = useCountUp(redirects.filter(r => r.match_type === 'exact').length);
  const fuzzy = useCountUp(redirects.filter(r => r.match_type === 'fuzzy').length);
  const manual = useCountUp(redirects.filter(r => r.match_type === 'manual').length);
  const confidence = useCountUp(
    redirects.length ? Math.round(redirects.reduce((acc, r) => acc + (r.confidence_score || 0), 0) / redirects.length * 100) : 0
  );

  // Filter + Pagination
  const mappingTypes: MappingType[] = ['All', 'exact', 'fuzzy', 'manual'];
  const filteredMappings = redirects.filter(m =>
    (typeFilter === 'All' || m.match_type === typeFilter) &&
    (m.old_url?.url?.toLowerCase().includes(search.toLowerCase()) || m.new_url?.url?.toLowerCase().includes(search.toLowerCase()))
  );
  const totalPages = Math.ceil(filteredMappings.length / perPage);
  const pagedMappings = filteredMappings.slice((page - 1) * perPage, page * perPage);
  useEffect(() => { setPage(1); }, [typeFilter, search, batchId]);

  // Export-Generatoren
  function generateHtaccess(redirects: Redirect[]): string {
    return `# 301 Redirects for SEO Relaunch\n# Generated by SEO Redirect Generator\n\n` +
      redirects.map((r) => `Redirect 301 ${r.old_url?.url} ${r.new_url?.url}`).join("\n");
  }
  function generateNginx(redirects: Redirect[]): string {
    return `# 301 Redirects for SEO Relaunch\n# Generated by SEO Redirect Generator\n\n` +
      redirects.map((r) => `rewrite ^${r.old_url?.url}$ ${r.new_url?.url} permanent;`).join("\n");
  }
  function generateCSV(redirects: Redirect[]): string {
    return 'Old URL,New URL,Confidence,Method\n' +
      redirects.map((r) => `${r.old_url?.url},${r.new_url?.url},${Math.round((r.confidence_score || 0) * 100)}%,${r.match_type}`).join("\n");
  }

  const exports = {
    htaccess: generateHtaccess(redirects),
    nginx: generateNginx(redirects),
    csv: generateCSV(redirects),
  };

  const handleCopy = async (text: string) => {
    await navigator.clipboard.writeText(text);
    setCopySuccess(true);
    setTimeout(() => setCopySuccess(false), 1200);
  };

  return (
    <div className="flex flex-col gap-16 py-20 w-full min-h-[70vh] bg-gradient-to-br from-indigo-50 via-white to-pink-50 px-0 md:px-0">
      {/* Stats-Header */}
      <div className="w-full max-w-5xl mx-auto grid grid-cols-2 md:grid-cols-5 gap-8 mb-8">
        <StatCard label="Total" value={total} />
        <StatCard label="Exact" value={exact} badge="Exact" icon={<span title="Exakte Matches">‚úÖ</span>} />
        <StatCard label="Fuzzy" value={fuzzy} badge="Fuzzy" icon={<span title="Fuzzy Matches">‚ú®</span>} />
        <StatCard label="Manual" value={manual} badge="Manual" icon={<span title="Manuell zugeordnet">üñêÔ∏è</span>} />
        <StatCard label="√ò Confidence" value={confidence + '%'} confidence={confidence} tooltip="Durchschnittlicher AI-Confidence-Score" />
      </div>
      {/* Export-Tabs als Segmented Controls */}
      <div className="w-full max-w-3xl mx-auto bg-white rounded-3xl shadow-2xl p-10 border-2 border-gray-100 flex flex-col gap-6 items-center">
        <div className="flex gap-4 mb-4 items-center justify-center w-full">
          {(['htaccess', 'nginx', 'csv'] as ExportTabKey[]).map(tab => (
            <button
              key={tab}
              className={`px-8 py-3 rounded-2xl text-lg font-bold transition-all duration-200 border-2 shadow-sm
                ${activeTab === tab
                  ? 'bg-gradient-to-r from-indigo-500 to-pink-500 text-white border-indigo-400 scale-105 shadow-xl'
                  : 'bg-gray-50 text-gray-400 border-gray-200 hover:bg-indigo-50 hover:text-indigo-600'}
              `}
              onClick={() => setActiveTab(tab)}
            >
              {tab === 'htaccess' ? '.htaccess' : tab === 'nginx' ? 'Nginx' : 'CSV/Excel'}
            </button>
          ))}
        </div>
        <div className="w-full flex flex-col gap-4 items-center">
          <pre className="bg-gray-50 rounded-xl p-6 text-base font-mono overflow-x-auto border border-gray-100 transition-all duration-150 w-full min-h-[180px] text-gray-700 shadow-inner">
            {exports[activeTab]}
          </pre>
          <div className="flex gap-4 w-full justify-end">
            <button
              className={`px-6 py-3 rounded-2xl bg-gradient-to-r from-emerald-400 to-indigo-400 text-white text-lg font-bold shadow-xl hover:scale-105 hover:shadow-2xl transition ${copySuccess ? 'animate-pulse' : ''}`}
              onClick={() => handleCopy(exports[activeTab])}
              title="In Zwischenablage kopieren"
            >
              {copySuccess ? <span>‚úîÔ∏è</span> : <span>üìã</span>} Copy
            </button>
            <a
              href={`data:text/plain;charset=utf-8,${encodeURIComponent(exports[activeTab])}`}
              download={`redirects.${activeTab === 'csv' ? 'csv' : 'txt'}`}
              className="px-6 py-3 rounded-2xl bg-gradient-to-r from-indigo-500 to-pink-500 text-white text-lg font-bold shadow-xl hover:scale-105 hover:shadow-2xl transition"
              title="Datei herunterladen"
            >
              ‚¨áÔ∏è Download
            </a>
          </div>
        </div>
      </div>
      {/* Mapping-Tabelle als Card */}
      <div className="w-full max-w-5xl mx-auto bg-white rounded-3xl shadow-2xl p-10 border-2 border-gray-100 mt-12">
        <div className="flex flex-wrap items-center mb-6 gap-4">
          <input
            type="text"
            placeholder="Suche alte oder neue URL‚Ä¶"
            value={search}
            onChange={e => setSearch(e.target.value)}
            className="px-4 py-3 rounded-xl border border-gray-200 focus:border-indigo-400 focus:ring-2 focus:ring-indigo-100 text-base w-full md:w-96 transition shadow-sm"
          />
          <div className="flex gap-2 flex-wrap">
            {mappingTypes.map(type => (
              <button
                key={type}
                className={`px-4 py-2 rounded-full text-base font-semibold border-2 transition-all duration-150
                  ${typeFilter === type
                    ? 'bg-gradient-to-r from-indigo-500 to-pink-500 text-white border-indigo-500 shadow'
                    : 'bg-gray-100 text-gray-500 border-gray-200 hover:bg-indigo-50 hover:text-indigo-600'}
                `}
                onClick={() => setTypeFilter(type)}
              >
                {type.charAt(0).toUpperCase() + type.slice(1)}
              </button>
            ))}
          </div>
          <span className="text-base text-gray-400 ml-auto">{filteredMappings.length} Ergebnisse</span>
        </div>
        <div className="overflow-x-auto max-h-[340px]">
          <table className="min-w-full text-base sticky-header">
            <thead className="sticky top-0 bg-white z-10 shadow-sm">
              <tr className="text-gray-500 border-b">
                <th className="py-3 px-4 text-left">Old URL</th>
                <th className="py-3 px-4 text-left">New URL</th>
                <th className="py-3 px-4 text-left">Type</th>
                <th className="py-3 px-4 text-left">Confidence</th>
                <th className="py-3 px-4 text-left">AI</th>
                <th className="py-3 px-4 text-left"></th>
              </tr>
            </thead>
            <tbody>
              {pagedMappings.length === 0 ? (
                <tr>
                  <td colSpan={6} className="py-16 text-center text-gray-400 text-xl">
                    <div className="flex flex-col items-center gap-2">
                      <span className="text-5xl">üîç</span>
                      <span>Keine Ergebnisse gefunden</span>
                    </div>
                  </td>
                </tr>
              ) :
                pagedMappings.map((m, i) => (
                  <tr key={i} className="border-b hover:bg-gradient-to-r hover:from-indigo-50 hover:to-pink-50 transition group">
                    <td className="py-3 px-4 font-mono text-indigo-700 text-base">{m.old_url?.url}</td>
                    <td className="py-3 px-4 font-mono text-pink-600 text-base">{m.new_url?.url}</td>
                    <td className="py-3 px-4">
                      <span className={`inline-flex items-center gap-2 px-3 py-1 rounded-full text-base font-medium
                        ${m.match_type === 'exact' ? 'bg-emerald-100 text-emerald-700' :
                          m.match_type === 'fuzzy' ? 'bg-yellow-100 text-yellow-700' :
                          m.match_type === 'manual' ? 'bg-gray-100 text-gray-500' : 'bg-gray-100 text-gray-500'}
                      `} title={m.match_type === 'exact' ? 'Exaktes Match' : m.match_type === 'fuzzy' ? 'Fuzzy Match' : m.match_type === 'manual' ? 'Manuell zugeordnet' : ''}>
                        {m.match_type === 'exact' ? '‚úÖ' : m.match_type === 'fuzzy' ? '‚ú®' : m.match_type === 'manual' ? 'üñêÔ∏è' : ''} {m.match_type}
                      </span>
                    </td>
                    <td className="py-3 px-4">
                      <div className="flex items-center gap-2">
                        <div className="w-20 h-3 bg-gray-200 rounded" title={`AI-Confidence: ${Math.round((m.confidence_score || 0) * 100)}%`}>
                          <div
                            className={`h-3 rounded-full ${m.confidence_score > 0.9 ? 'bg-emerald-400' : m.confidence_score > 0.8 ? 'bg-yellow-400' : 'bg-gray-400'}`}
                            style={{ width: `${Math.round((m.confidence_score || 0) * 100)}%` }}
                          />
                        </div>
                        <span className="text-base text-gray-500 font-bold">{m.confidence_score ? `${Math.round((m.confidence_score || 0) * 100)}%` : '-'}</span>
                      </div>
                    </td>
                    <td className="py-3 px-4">
                      {m.match_type !== 'manual' ? (
                        <span className="inline-flex items-center gap-1 text-indigo-500 text-base font-semibold" title="AI generiert"><svg width="20" height="20" fill="none"><circle cx="10" cy="10" r="10" fill="#6366f1"/><path d="M10 5v5l2 2" stroke="#fff" strokeWidth="1.5" strokeLinecap="round"/></svg>AI</span>
                      ) : (
                        <span className="inline-flex items-center gap-1 text-gray-400 text-base font-semibold" title="Manuell zugeordnet"><svg width="20" height="20" fill="none"><circle cx="10" cy="10" r="10" fill="#e5e7eb"/><path d="M10 5v5l2 2" stroke="#fff" strokeWidth="1.5" strokeLinecap="round"/></svg>Manuell</span>
                      )}
                    </td>
                    <td className="py-3 px-4">
                      <button
                        className={`px-4 py-2 rounded-xl bg-indigo-50 text-indigo-600 text-base font-semibold hover:bg-indigo-100 transition flex items-center gap-2 ${copySuccess ? 'animate-pulse' : ''} opacity-0 group-hover:opacity-100`}
                        onClick={() => handleCopy(`${m.old_url?.url} -> ${m.new_url?.url}`)}
                        title="Redirect kopieren"
                      >
                        {copySuccess ? <span>‚úîÔ∏è</span> : <span>üìã</span>}
                        Copy
                      </button>
                    </td>
                  </tr>
                ))
              }
            </tbody>
          </table>
        </div>
        {/* Pagination */}
        {totalPages > 1 && (
          <div className="flex justify-center gap-2 mt-8">
            {Array.from({ length: totalPages }, (_, i) => (
              <button
                key={i}
                className={`w-10 h-10 rounded-full flex items-center justify-center text-base font-semibold border-2 transition-all duration-150
                  ${page === i + 1
                    ? 'bg-indigo-500 text-white border-indigo-500 shadow'
                    : 'bg-gray-100 text-gray-500 border-gray-200 hover:bg-indigo-50 hover:text-indigo-600'}
                `}
                onClick={() => setPage(i + 1)}
              >
                {i + 1}
              </button>
            ))}
          </div>
        )}
      </div>
      {/* Debug Panel */}
      <div className="w-full flex justify-end px-2 md:px-8 mt-2">
        <button
          className="px-4 py-2 rounded-xl bg-gray-100 text-gray-500 text-sm font-semibold hover:bg-indigo-100 hover:text-indigo-600 border border-gray-200 transition"
          onClick={() => setShowDebug(v => !v)}
        >
          {showDebug ? 'Debug ausblenden' : 'Debug anzeigen'}
        </button>
      </div>
      {showDebug && (
        <div className="w-full px-2 md:px-8 mt-2">
          <pre className="bg-gray-900 text-green-200 rounded-xl p-6 text-xs overflow-x-auto max-h-96 shadow-inner">
            {JSON.stringify(redirects, null, 2)}
          </pre>
        </div>
      )}
      {/* Footer Branding */}
      <footer className="mt-16 text-center text-base text-gray-400 flex flex-col items-center gap-2 w-full px-2 md:px-8">
        <span>Powered by <span className="font-semibold text-indigo-500">OpenAI</span> & modern SaaS-UX</span>
        <a href="#" className="underline hover:text-indigo-600">Datenschutz</a>
      </footer>
      <style jsx>{`
        .sticky-header thead {
          position: sticky;
          top: 0;
          z-index: 10;
        }
        .sticky-header th {
          background: white;
        }
      `}</style>
    </div>
  );
}

function StatCard({ label, value, badge, confidence, icon, tooltip }: { label: string; value: string | number; badge?: string; confidence?: number; icon?: React.ReactNode; tooltip?: string }) {
  return (
    <div className="bg-white rounded-xl shadow p-4 flex flex-col items-center border border-gray-100 relative transition hover:shadow-lg hover:-translate-y-1 group">
      <div className="text-2xl font-bold text-indigo-600 mb-1 flex items-center gap-1">{icon}{value}</div>
      <div className="text-xs text-gray-500 font-medium tracking-wide">{label}</div>
      {badge && (
        <span className={`absolute top-2 right-2 px-2 py-0.5 rounded text-xs font-semibold
          ${badge === 'Exact' ? 'bg-emerald-100 text-emerald-700' : badge === 'Fuzzy' ? 'bg-yellow-100 text-yellow-700' : 'bg-gray-100 text-gray-500'}`}>{badge}</span>
      )}
      {confidence !== undefined && (
        <div className="w-20 h-2 bg-gray-200 rounded mt-2" title={tooltip}>
          <div className="h-2 rounded bg-gradient-to-r from-emerald-400 via-yellow-400 to-pink-400" style={{ width: `${confidence}%` }} />
        </div>
      )}
    </div>
  );
} 